// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma db push
//npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())

  @@map("users")
}

model Expenses {
  id         String   @id @default(uuid())
  nome       String
  recorrente String
  vencimento DateTime
  frequencia String
  replicar   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String // Relacionamento com um cliente, caso necessário

  @@unique([vencimento, id, nome])
  @@map("expenses")
}

model ExpensesMonths {
  id         String   @id @default(uuid())
  mes        Int
  ano        Int
  valor      Int
  status     Int
  vencimento DateTime
  descricao  String
  despesaId  String
  contaId    String
  categoria  String
  customerId String
  observacao String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([id])
  @@map("expensesMonths")
}

model Incomes {
  id          String   @id @default(uuid())
  nome        String
  recorrente  String
  recebimento DateTime
  frequencia  String
  replicar    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customerId  String // Relacionamento com um cliente, caso necessário

  @@unique([id])
  @@map("incomes")
}

model IncomeMonths {
  id          String   @id @default(uuid())
  mes         Int
  ano         Int
  valor       Int
  status      Int
  recebimento DateTime
  descricao   String
  incomeId    String
  contaId     String
  categoria   String
  customerId  String
  observacao  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([id])
  @@map("incomesMonths")
}

model BankAccount {
  id             String   @id @default(uuid())
  nome           String
  conta          String
  banco          Int
  nomeBanco      String
  contaPrincipal Boolean
  agencia        String
  saldo          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  customerId     String

  @@unique([conta, agencia])
  @@map("bankAccount")
}
